<%  if (property.type in [Boolean, boolean])
        out << renderBooleanEditor(domainClass, property)
    else if (property.type in Number || property.type.isPrimitive())
        out << renderNumberEditor(domainClass, property)
    else if (property.type in [String, URL])
        out << renderStringEditor(domainClass, property)
	else if (property.type in [Date, java.sql.Date, Calendar])
		out << renderDateTimeEditor(domainClass, property, "date", "yyyy-MM-dd")
	else if (property.type in java.sql.Time)
		out << renderDateTimeEditor(domainClass, property, "time", "HH:mm")
    else if (property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type in TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type in Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type in Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide()))
        out << renderManyToMany(domainClass, property)
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		def sb = new StringBuilder()
//		if (property.type.values().size() > 3) {
	    	sb << "<bean:select beanName=\"${domainInstance}\" property=\"${property.name}\" from=\"\${${property.type.name}?.values()}\" "
	    	// TODO: this doesn't actually use the MessageSourceResolvable interface properly
	        if (org.springframework.context.MessageSourceResolvable.isAssignableFrom(property.type)) {
	        	sb << "valueMessagePrefix=\"${property.type.name}\" "
	        }
	        sb << "${renderNoSelection(property)} />"
//		} else {
//			sb << "<bean:radioGroup beanName=\"${domainInstance}\" property=\"${property.name}\" />"
//		}
        return sb.toString()
    }

    private renderStringEditor(domainClass, property) {
        if (cp?.inList) {
			return "<bean:select beanName=\"${domainInstance}\" property=\"${property.name}\" from=\"\${${domainInstance}.constraints.${property.name}.inList}\" ${renderNoSelection(property)} />"
		}
        else if (property.type in URL || cp?.url) {
			return "<bean:input type=\"url\" beanName=\"${domainInstance}\" property=\"${property.name}\" />"
        }
		else if (cp?.password) {
			return "<bean:input type=\"password\" beanName=\"${domainInstance}\" property=\"${property.name}\" />"
		}
		else if (cp?.email) {
			return "<bean:input type=\"email\" beanName=\"${domainInstance}\" property=\"${property.name}\" />"
        }
        else if ("textarea" == cp?.widget || (cp?.maxSize > 250 && !cp?.inList)) {
			return "<bean:textArea beanName=\"${domainInstance}\" property=\"${property.name}\" cols=\"40\" rows=\"5\" />"
		}
		else {
			return "<bean:input beanName=\"${domainInstance}\" property=\"${property.name}\" />"
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return "<bean:customField beanName=\"${domainInstance}\" property=\"${property.name}\"><input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" /></bean:customField>"
    }

    private renderManyToOne(domainClass,property) {
        if (property.association) {
            return "<bean:select beanName=\"${domainInstance}\" property=\"${property.name}\" from=\"\${${property.type.name}.list()}\" ${renderNoSelection(property)} />"
        }
    }

    private renderManyToMany(domainClass, property) {
        return "<bean:select beanName=\"${domainInstance}\" property=\"${property.name}\" from=\"\${${property.referencedDomainClass.fullName}.list()}\" multiple=\"yes\" size=\"5\" />"
    }

    private renderOneToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println "<ul>"
        pw.println "<g:each in=\"\${${domainInstance}?.${property.name}?}\" var=\"${property.name[0]}\">"
        pw.println "    <li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println "</g:each>"
        pw.println "</ul>"
        pw.println "<g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"create\" params=\"['${domainClass.propertyName}.id': ${domainInstance}?.id]\">\${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</g:link>"
        return sw.toString()
    }

    private renderNumberEditor(domainClass, property) {
		if (cp?.range) {
			return "<bean:input type=\"range\" beanName=\"${domainInstance}\" property=\"${property.name}\" min=\"${cp.range.from}\" max=\"${cp.range.to}\" />"
		}
		else if (cp?.inList) {
			return "<bean:select beanName=\"${domainInstance}\" property=\"${property.name}\" from=\"\${${domainInstance}.constraints.${property.name}.inList}\" ${renderNoSelection(property)} />"
		}
		else if (property.type == Byte) {
            return "<bean:input type=\"number\" beanName=\"${domainInstance}\" property=\"${property.name}\" min=\"-128\" max=\"127\" />"
		}
		else {
			def sb = new StringBuilder("<bean:input type=\"number\" beanName=\"${domainInstance}\" property=\"${property.name}\" ")
			if (cp?.min != null) sb << "min=\"${cp.min}\" "
			if (cp?.max != null) sb << "max=\"${cp.max}\" "
			if (cp && !cp.editable) sb << "readonly=\"readonly\" "
			sb << "/>"
			return sb.toString()
		}
     }

    private renderBooleanEditor(domainClass, property) {
		def sb = new StringBuilder("<bean:checkBox beanName=\"${domainInstance}\" property=\"${property.name}\" ")
		if (cp?.widget) sb << "widget=\"${cp.widget}\" "
		cp?.attributes?.each { k, v ->
			sb << "${k}=\"${v}\" "
		}
		sb << "value=\"\${${domainInstance}?.${property.name}}\" />"
		return sb.toString()
    }

    private renderDateTimeEditor(domainClass, property, type, pattern) {
        if (cp && !cp.editable) {
			return "\${${domainInstance}?.${property.name}?.format('${pattern}')}"
		} else {
			return "<bean:input type=\"${type}\" beanName=\"${domainInstance}\" property=\"${property.name}\" class=\"${type}\" value=\"\${${domainInstance}?.${property.name}?.format('${pattern}')}\" />"
        }
    }

	// TODO: beanfieldsify
    private renderSelectTypeEditor(type, domainClass,property) {
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        }
        else {
            def sb = new StringBuilder("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }

    private renderNoSelection(property) {
        if (property.optional) {
            if (property.manyToOne || property.oneToOne) {
                return "noSelection=\"['null': '']\""
            }
            else {
                return "noSelection=\"['': '']\""
            }
        }
        return ""
    }
%>